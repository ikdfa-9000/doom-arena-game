/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/hand_left.glb 
*/
import { LoopOnce } from 'three'
import React, { useEffect, useRef, forwardRef, useImperativeHandle, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export const HandLeftModel = forwardRef((props, ref) => {
  const modelRef = useRef()
  const { nodes, materials, animations } = useGLTF('/models/weapons/hand_left.glb')
  const { actions } = useAnimations(animations, modelRef)
  const [ visibility, setVisibility ] = useState(true)

  useEffect(() => {
    for (const actionName in actions) {
      actions[actionName].setLoop(LoopOnce)
      actions[actionName].clampWhenFinished = 1
    }
    actions['sg_hold'].reset().fadeIn(0).play()
  }, [])

  useImperativeHandle(ref, () => ({
    print_actions() { // for debugging purposes
      console.log(actions)
    }, 
    play_animation(name) {
      for (const key in actions) {
        if (key === name) {
          actions[key].reset().fadeIn(0).play();
        } else {
          actions[key].stop();
        }
      }
    },
    setVisibilityStatus(status) { // cursed
      setVisibility(status) }
  }))
  return (
    <group ref={modelRef} {...props} visible={visibility} dispose={null}>
      <group name="Scene">
        <group name="root" position={[0, 0.072, 0]} rotation={[-Math.PI, 0, -Math.PI]} scale={0.809}>
          <primitive object={nodes.arm_left_up} />
          <skinnedMesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.Material} skeleton={nodes.Cube001.skeleton} />
        </group>
      </group>
    </group>
  )
})

useGLTF.preload('/hand_left.glb')
