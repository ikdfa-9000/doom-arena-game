/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/supershotgun.glb 
*/
import { LoopOnce } from 'three'
import React, { useEffect, useRef, forwardRef, useImperativeHandle, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export const SuperShotgunModel = forwardRef((props, ref) => {
  const modelRef = useRef()
  const { nodes, materials, animations } = useGLTF('/models/weapons/supershotgun.glb')
  const { actions } = useAnimations(animations, modelRef)
  const [ visibility, setVisibility ] = useState(false)

  useEffect(() => {
    for (const actionName in actions) {
      actions[actionName].setLoop(LoopOnce)
      actions[actionName].clampWhenFinished = 1
    }
    actions['rootAction'].reset().fadeIn(0).play()
  }, [])
  
  useImperativeHandle(ref, () => ({
    print_actions() { // for debugging purposes
      console.log(actions)
    }, 
    play_animation(name) {
      for (const actionName in actions) {
        if (actionName === name) {
          actions[actionName].reset().fadeIn(0).play();
        } else {
          actions[actionName].stop();
        }
      }
    },
    setVisibilityStatus(status) { // cursed
      setVisibility(status) }
  }))
  return (
    <group ref={modelRef} {...props} visible={visibility}  dispose={null}>
      <group name="Scene">
        <group name="root_gun">
          <primitive object={nodes.ssg_holder} />
          <primitive object={nodes.neutral_bone} />
          <group name="Cylinder">
            <skinnedMesh name="Cylinder_1" geometry={nodes.Cylinder_1.geometry} material={materials.gun} skeleton={nodes.Cylinder_1.skeleton} />
            <skinnedMesh name="Cylinder_2" geometry={nodes.Cylinder_2.geometry} material={materials.shells} skeleton={nodes.Cylinder_2.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
})

useGLTF.preload('/supershotgun.glb')
